"use strict";(self.webpackChunk_axlair_jupyterlab_vim=self.webpackChunk_axlair_jupyterlab_vim||[]).push([[892],{892:(e,t,o)=>{o.r(t),o.d(t,{default:()=>b});var n=o(480),i=o(710),l=o(993),d=o(614),a=o(863),c=o(24),s=o(195);class r{constructor({enabled:e,userKeybindings:t}){this._lastActiveEditor=null,this.enabled=e,this.userKeybindings=null!=t?t:[]}async onActiveEditorChanged(e,t){t&&(await t.content.ready,this.modifyEditor(t.content.editor))}updateLastActive(){this._lastActiveEditor&&this.modifyEditor(this._lastActiveEditor)}modifyEditor(e){if(!e)throw Error("Editor not available");const t=e;this._lastActiveEditor=t;const o=t.editor;if(this.enabled){if(!t.getOption("vim")){t.setOption("vim",!0);const n=(0,a.getCM)(o);n.on("vim-mode-change",(()=>{if(!n.state.vim)throw Error("CodeMirror vim state not available");e.host.dataset.jpVimModeName=n.state.vim.mode})),t.hasFocus=()=>!(!n.state.dialog||!n.state.dialog.contains(document.activeElement))||o.hasFocus}a.Vim.defineAction("undo",((t,o)=>{for(let t=0;t<o.repeat;t++)e.undo()})),a.Vim.defineAction("redo",((t,o)=>{for(let t=0;t<o.repeat;t++)e.redo()}));const n=(0,a.getCM)(o);return["normal","visual","insert"].forEach((e=>a.Vim.mapclear(e))),this.userKeybindings.forEach((({command:e,keys:t,context:o,mapfn:n,enabled:i})=>{i&&("map"===n?a.Vim.map(e,t,o):a.Vim.noremap(e,t,o))})),a.Vim.handleKey(n,"<Esc>"),!0}return!!t.getOption("vim")&&(t.setOption("vim",!1),!1)}}class m extends r{constructor({commands:e,enabled:t,userKeybindings:o}){super({userKeybindings:o,enabled:t}),this._lastActiveCell=null,this._commands=e}onActiveCellChanged(e,t){var o,n;const i={index:null===(o=e.currentWidget)||void 0===o?void 0:o.content.activeCellIndex,cellCount:null===(n=e.currentWidget)||void 0===n?void 0:n.content.widgets.length};this.modifyCell(t,i).catch(console.error)}updateLastActive(){this._lastActiveCell&&this._lastActiveCellContext&&this.modifyCell(this._lastActiveCell,this._lastActiveCellContext)}async modifyCell(e,t){e&&t&&(this._lastActiveCell=e,this._lastActiveCellContext=t,await e.ready,e.isDisposed?console.warn("Cell was already disposed, cannot setup vim mode"):this.modifyEditor(e.editor)&&this._modifyEdgeNavigation(e,t))}_modifyEdgeNavigation(e,t){const o=(n,i,l,d)=>{const c=i;let s=c.ch;const r=e;switch(null==d?void 0:d.lastMotion){case n.moveByLines:case n.moveByDisplayLines:case n.moveByScroll:case n.moveToColumn:case n.moveToEol:case o:s=d.lastHPos;break;default:d.lastHPos=s}const m=l.repeat+(l.repeatOffset||0);let u=l.forward?c.line+m:c.line-m;const v=n.firstLine(),C=n.lastLine(),f=n.findPosV(c,l.forward?m:-m,"line",d.lastHSPos);if((l.forward?f.line>u:f.line<u)&&(u=f.line,s=f.ch),!(u<v||u>C))return l.toFirstChar&&(s=function(e){if(!e)return 0;const t=e.search(/\S/);return-1===t?e.length:t}(n.getLine(u)),d.lastHPos=s),d.lastHSPos=n.charCoords(new a.CodeMirror.Pos(u,s),"div").left,new a.CodeMirror.Pos(u,s);if(null===r||"markdown"!==r.model.type||!l.forward&&0===t.index||l.handleArrow||(r.rendered=!0),l.forward)if(l.handleArrow){const e=n.getCursor(),t=n.cm6.state.doc.line(C+1).length;e.line===C&&e.ch===t||(n.setCursor(C,t),this._commands.execute("notebook:move-cursor-down"))}else this._commands.execute("notebook:move-cursor-down");else if(l.handleArrow){const e=n.getCursor();0===e.line&&0===e.ch||(n.setCursor(0,0),this._commands.execute("notebook:move-cursor-up"))}else this._commands.execute("notebook:move-cursor-up")};a.Vim.defineMotion("moveByLinesOrCell",o),a.Vim.mapCommand("<Up>","motion","moveByLinesOrCell",{forward:!1,linewise:!0,handleArrow:!0},{context:"normal"}),a.Vim.mapCommand("<Down>","motion","moveByLinesOrCell",{forward:!0,linewise:!0,handleArrow:!0},{context:"normal"}),a.Vim.mapCommand("k","motion","moveByLinesOrCell",{forward:!1,linewise:!0},{context:"normal"}),a.Vim.mapCommand("j","motion","moveByLinesOrCell",{forward:!0,linewise:!0},{context:"normal"}),a.Vim.defineAction("moveCellDown",((e,t)=>{this._commands.execute("notebook:move-cell-down")})),a.Vim.defineAction("moveCellUp",((e,t)=>{this._commands.execute("notebook:move-cell-up")})),a.Vim.mapCommand("<C-e>","action","moveCellDown",{},{extra:"normal"}),a.Vim.mapCommand("<C-y>","action","moveCellUp",{},{extra:"normal"}),a.Vim.defineAction("splitCell",((e,t)=>{this._commands.execute("notebook:split-cell-at-cursor")})),a.Vim.mapCommand("-","action","splitCell",{},{extra:"normal"})}}const u="@axlair/jupyterlab_vim",v="jupyterlab-vim:toggle";let C=!1,f=!0,g=!0,p=!0;const b={id:u,autoStart:!0,activate:async function(e,t,o,i,d){const b=s.Prec.highest(c.EditorView.theme({".cm-fat-cursor":{position:"absolute",background:"var(--jp-vim-cursor-color)",border:"none",whiteSpace:"pre"},"&:not(.cm-focused) .cm-fat-cursor":{background:"none",outline:"solid 1px var(--jp-vim-cursor-color)",color:"transparent !important"}}));o.addExtension({name:"vim",factory:e=>l.EditorExtensionRegistry.createConditionalExtension([b,(0,a.vim)({status:!1})])}),e.commands.addCommand(v,{label:"Enable Vim Mode",execute:()=>{i&&i.set(`${u}:plugin`,"enabled",!C)},isToggled:()=>C}),e.commands.addCommand("vim:enter-normal-mode",{label:"Enter Normal Vim Mode",execute:()=>{const o=e.shell.currentWidget;if(o)if(d.currentWidget===o)x.modifyEditor(d.currentWidget.content.editor);else if(t.currentWidget===o){const e={index:t.currentWidget.content.activeCellIndex,cellCount:t.currentWidget.content.widgets.length};w.modifyCell(t.currentWidget.content.activeCell,e)}else console.warn("Current widget is not vim-enabled");else console.warn("Current widget not found")},isEnabled:()=>C});const h=(await i.get(`${u}:plugin`,"extraKeybindings")).composite,w=new m({commands:e.commands,enabled:C,userKeybindings:h}),x=new r({enabled:C&&f,userKeybindings:h});let y=null,E=!1;a.Vim.defineEx("write","w",(()=>{e.commands.execute("docmanager:save")})),a.Vim.defineEx("quit","q",(()=>{setTimeout((()=>{e.commands.execute("notebook:enter-command-mode")}))})),t.activeCellChanged.connect(w.onActiveCellChanged,w),d.currentChanged.connect(x.onActiveEditorChanged,x);const A=e.shell;async function k(o){const n=(await i.get(`${u}:plugin`,"extraKeybindings")).composite;C=!0===o.get("enabled").composite,f=!0===o.get("enabledInEditors").composite;const l=o.get("cmdModeKeys").composite;l&&(g=l.escToCmdMode,p=l.shiftEscOverrideBrowser),e.commands.notifyCommandChanged(v),w.enabled=C,w.userKeybindings=n,x.enabled=C&&f,x.userKeybindings=n,C?(null==y||y.dispose(),E||(E=!0,await e.restored)):y=e.commands.addKeyBinding({command:"notebook:enter-command-mode",keys:["Escape"],selector:".jp-Notebook.jp-mod-editMode"}),t.forEach((e=>{e.node.dataset.jpVimMode=`${C}`,e.node.dataset.jpVimEscToCmdMode=`${g}`,e.node.dataset.jpVimShiftEscOverrideBrowser=`${p}`})),d.forEach((e=>{e.node.dataset.jpVimMode=`${C&&f}`})),null==x||x.updateLastActive(),null==w||w.updateLastActive(),t.widgetAdded.connect(((e,t)=>{t.node.dataset.jpVimMode=`${C}`,t.node.dataset.jpVimEscToCmdMode=`${g}`,t.node.dataset.jpVimShiftEscOverrideBrowser=`${p}`})),d.widgetAdded.connect(((e,t)=>{t.node.dataset.jpVimMode=`${C&&f}`}))}return A.currentChanged.connect((()=>{const e=A.currentWidget;if(e)if(d.currentWidget===e)x.modifyEditor(d.currentWidget.content.editor);else if(t.currentWidget===e){const e={index:t.currentWidget.content.activeCellIndex,cellCount:t.currentWidget.content.widgets.length};w.modifyCell(t.currentWidget.content.activeCell,e)}})),function(e,t){const{commands:o,shell:i}=e;function l(e){const o=t.currentWidget;return!1!==e.activate&&o&&i.currentWidget!==o&&i.activateById(o.id),o}function d(){return null!==t.currentWidget&&t.currentWidget===e.shell.currentWidget}o.addCommand("vim:run-select-next-edit",{label:"Run Cell and Edit Next Cell",execute:e=>{const t=l(e);if(t){const{context:e,content:o}=t;n.NotebookActions.runAndAdvance(o,e.sessionContext),t.content.mode="edit"}},isEnabled:d}),o.addCommand("vim:run-cell-and-edit",{label:"Run Cell and Edit Cell",execute:e=>{const t=l(e);if(t){const{context:e,content:o}=t;n.NotebookActions.run(o,e.sessionContext),null!==o.activeCell&&"markdown"===o.activeCell.model.type||(t.content.mode="edit")}},isEnabled:d}),o.addCommand("vim:cut-cell-and-edit",{label:"Cut Cell(s) and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.cut(e),e.mode="edit"}},isEnabled:d}),o.addCommand("vim:copy-cell-and-edit",{label:"Copy Cell(s) and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.copy(e),e.mode="edit"}},isEnabled:d}),o.addCommand("vim:paste-cell-and-edit",{label:"Paste Cell(s) and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.paste(e,"below"),e.mode="edit"}},isEnabled:d}),o.addCommand("vim:merge-and-edit",{label:"Merge and Edit Cell",execute:e=>{const t=l(e);if(t){const{content:e}=t;n.NotebookActions.mergeCells(e),t.content.mode="edit"}},isEnabled:d}),o.addCommand("vim:enter-insert-mode",{label:"Enter Insert Mode",execute:e=>{const t=l(e);if(t){const{content:e}=t;if(null!==e.activeCell){const o=e.activeCell.editor;t.content.mode="edit";const n=(0,a.getCM)(o.editor);if(!n)return void console.error("CodeMirror vim wrapper not found");a.Vim.handleKey(n,"i")}}},isEnabled:d}),o.addCommand("vim:leave-insert-mode",{label:"Leave Insert Mode",execute:e=>{const t=l(e);if(t){const{content:e}=t;if(null!==e.activeCell){const t=e.activeCell.editor,o=(0,a.getCM)(t.editor);if(!o)return void console.error("CodeMirror vim wrapper not found");a.Vim.handleKey(o,"<Esc>")}}},isEnabled:d}),o.addCommand("vim:leave-current-mode",{label:"Move Insert to Normal to Jupyter Command Mode",execute:e=>{const t=l(e);if(t){const{content:e}=t;if(null!==e.activeCell){const t=e.activeCell.editor,n=(0,a.getCM)(t.editor);if(!n)return void console.error("CodeMirror vim wrapper not found");const i=n.state.vim;if(!i)return void console.error("CodeMirror vim state not found");i.insertMode||i.visualMode||null!==i.inputState.operator||null!==i.inputState.motion||0!==i.inputState.keyBuffer.length?a.Vim.handleKey(n,"<Esc>"):o.execute("notebook:enter-command-mode")}}},isEnabled:d}),o.addCommand("vim:select-below-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=l(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectBelow(t.content)}},isEnabled:d}),o.addCommand("vim:select-above-execute-markdown",{label:"Execute Markdown and Select Cell Above",execute:e=>{const t=l(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&0!==e.activeCellIndex&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectAbove(t.content)}},isEnabled:d}),o.addCommand("vim:select-first-cell",{label:"Select First Cell",execute:async e=>{const t=l(e);if(t){const{content:e}=t;e.activeCellIndex=0,e.deselectAll(),null!==e.activeCell&&(await e.scrollToItem(e.activeCellIndex,"smart"),e.activeCell.node.focus())}},isEnabled:d}),o.addCommand("vim:select-last-cell",{label:"Select Last Cell",execute:async e=>{const t=l(e);if(t){const{content:e}=t;e.activeCellIndex=t.content.widgets.length-1,e.deselectAll(),null!==e.activeCell&&(await e.scrollToItem(e.activeCellIndex,"smart"),e.activeCell.node.focus())}},isEnabled:d}),o.addCommand("vim:center-cell",{label:"Center Cell",execute:e=>{const t=l(e);t&&null!==t.content.activeCell&&t.content.scrollToCell(t.content.activeCell,"center")},isEnabled:d}),o.addCommand("vim:no-action",{label:"Prevent Default Browser Action",caption:"Prevent default action for some keybindings (defined in the settings); for example Firefox binds Shift + Esc to its Process Manager which conflicts with the expected action in the vim mode.",execute:e=>{}})}(e,t),i.load(`${u}:plugin`).then((e=>{k(e),e.changed.connect(k)}),(e=>{console.error(`Could not load settings, so did not active ${u}: ${e}`)})),Promise.resolve()},requires:[n.INotebookTracker,l.IEditorExtensionRegistry,d.ISettingRegistry],optional:[i.IEditorTracker]}}}]);